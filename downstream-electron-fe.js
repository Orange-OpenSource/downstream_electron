/*!
 * downstream-electron,0.4.0-o.1,2021-02-23 17:35:15.301,castlabs GmbH
 * 
 * Copyright (C) 2017 Castlabs GmbH.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
!function(Q,F){if("object"==typeof exports&&"object"==typeof module)module.exports=F(require("electron"));else if("function"==typeof define&&define.amd)define(["electron"],F);else{var B="object"==typeof exports?F(require("electron")):F(Q.electron);for(var U in B)("object"==typeof exports?exports:Q)[U]=B[U]}}(global,function(__WEBPACK_EXTERNAL_MODULE__2__){return f={0:function(module,exports,__webpack_require__){"use strict";eval('\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar errors = __webpack_require__(17);\n\nvar translations = __webpack_require__(18);\n\nvar CODES = __webpack_require__(6);\n\nvar REGEXP_KEYS = /%[A-Za-z0-9_-]+%/g;\n/**\n * @namespace <global>\n * @module util/translation\n * @property {translationErrors} e - {@link translationErrors}\n */\n\nvar translation = {};\n/**\n *\n * @param {object} key - translation object\n * @returns {*} key from translation object\n * @private\n */\n\nfunction _getCode(key) {\n  key = key || {};\n  var code = key.code;\n\n  if (!code) {\n    code = CODES.GENERAL;\n  }\n\n  return code;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} all key values\n * @private\n */\n\n\nfunction _getKeyValues(key, values) {\n  var translation = key;\n  var keyValues = [];\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    if (values instanceof Array) {\n      var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n      for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n        var keyValue = {};\n        keyValue[groups[i].replace(/%/g, "")] = values[i];\n        keyValues.push(keyValue);\n      }\n    } else if (_typeof(values) === "object") {\n      for (var _key in values) {\n        if (values.hasOwnProperty(_key)) {\n          var _keyValue = {};\n          _keyValue[_key] = values[_key];\n          keyValues.push(_keyValue);\n        }\n      }\n    } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n      var _groups = translation.match(REGEXP_KEYS) || [];\n\n      for (var _i = 0, _j = _groups.length; _i < _j; _i++) {\n        var _keyValue2 = {};\n        _keyValue2[_groups[_i].replace(/%/g, "")] = values;\n        keyValues.push(_keyValue2);\n      }\n    }\n  }\n\n  if (keyValues && !keyValues.length) {\n    keyValues = undefined;\n  }\n\n  return keyValues;\n}\n/**\n *\n * @param {object} key - translation object\n * @param {array|object|string|number|boolean} values - translation values\n * @returns {*} translated message with attached values\n * @private\n */\n\n\nfunction _getTranslation(key, values) {\n  var translation = key;\n\n  if (_typeof(translation) === "object") {\n    translation = translation.msg;\n  }\n\n  if (translation) {\n    translation = _parseValues(translation, values);\n  } else {\n    translation = "Internal Error";\n  }\n\n  return translation;\n}\n/**\n *\n * @param {array} args - arguments\n * @returns {array} array of all values except 1st one\n * @private\n */\n\n\nfunction _getValues(args) {\n  var values = [];\n\n  for (var i = 1, j = args.length; i < j; i++) {\n    values.push(args[i]);\n  }\n\n  if (values.length === 0) {\n    values = undefined;\n  } else if (values.length === 1) {\n    values = values[0];\n  }\n\n  return values;\n}\n/**\n *\n * @param {array} groups - matched groups\n * @returns {array} unique names\n * @private\n */\n\n\nfunction _getUniqueKeys(groups) {\n  var hashKey = {};\n  var uniqueNames = [];\n  groups = groups || [];\n\n  for (var i = 0, j = groups.length; i < j; i++) {\n    if (!hashKey[groups[i]]) {\n      hashKey[groups[i]] = true;\n      uniqueNames.push(groups[i]);\n    }\n  }\n\n  return uniqueNames;\n}\n/**\n *\n * @param {string} translation - text to be translated\n * @param {array|object|string|number|boolean} values - values to be parsed with translation\n * @returns {*} translation\n * @private\n */\n\n\nfunction _parseValues(translation, values) {\n  values = values || \'\';\n\n  if (values instanceof Array) {\n    var groups = _getUniqueKeys(translation.match(REGEXP_KEYS));\n\n    for (var i = 0, j = Math.min(groups.length, values.length); i < j; i++) {\n      translation = translation.replace(new RegExp(groups[i], "g"), values[i]);\n    }\n  } else if (_typeof(values) === "object") {\n    for (var key in values) {\n      if (values.hasOwnProperty(key)) {\n        translation = translation.replace(new RegExp("%" + key + "%", "g"), values[key]);\n      }\n    }\n\n    translation = translation.replace(REGEXP_KEYS, values);\n  } else if (typeof values === "string" || typeof values === "number" || typeof values === "boolean") {\n    translation = translation.replace(REGEXP_KEYS, values);\n  }\n\n  return translation;\n}\n/**\n * @alias module:util/translation.getError\n * @param {object} key - translation object\n * @returns {{code: *, msg: *, keys: *}} - error object with code, msg and keys\n */\n\n\nfunction getError(key) {\n  var values = _getValues(arguments);\n\n  var keyValues = _getKeyValues(key, values);\n\n  var msg = _getTranslation(key, values);\n\n  var code = _getCode(key);\n\n  return {\n    code: code,\n    msg: msg,\n    keys: keyValues\n  };\n}\n/**\n * @alias module:util/translation.getTranslation\n * @static\n * @param {object} key - translation object\n * @returns {*} - return translated string with correctly applied values\n */\n\n\nfunction getTranslation(key) {\n  var values = _getValues(arguments);\n\n  return _getTranslation(key, values);\n}\n\ntranslation.getError = getError;\ntranslation.getTranslation = getTranslation;\ntranslation.e = errors;\ntranslation.t = translations;\nmodule.exports = translation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdHJhbnNsYXRpb24vaW5kZXguanM/ZjUyNyJdLCJuYW1lcyI6WyJlcnJvcnMiLCJyZXF1aXJlIiwidHJhbnNsYXRpb25zIiwiQ09ERVMiLCJSRUdFWFBfS0VZUyIsInRyYW5zbGF0aW9uIiwiX2dldENvZGUiLCJrZXkiLCJjb2RlIiwiR0VORVJBTCIsIl9nZXRLZXlWYWx1ZXMiLCJ2YWx1ZXMiLCJrZXlWYWx1ZXMiLCJtc2ciLCJBcnJheSIsImdyb3VwcyIsIl9nZXRVbmlxdWVLZXlzIiwibWF0Y2giLCJpIiwiaiIsIk1hdGgiLCJtaW4iLCJsZW5ndGgiLCJrZXlWYWx1ZSIsInJlcGxhY2UiLCJwdXNoIiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZmluZWQiLCJfZ2V0VHJhbnNsYXRpb24iLCJfcGFyc2VWYWx1ZXMiLCJfZ2V0VmFsdWVzIiwiYXJncyIsImhhc2hLZXkiLCJ1bmlxdWVOYW1lcyIsIlJlZ0V4cCIsImdldEVycm9yIiwiYXJndW1lbnRzIiwia2V5cyIsImdldFRyYW5zbGF0aW9uIiwiZSIsInQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7OztBQUViLElBQU1BLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxFQUFELENBQXRCOztBQUNBLElBQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxFQUFELENBQTVCOztBQUNBLElBQU1FLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyxDQUFELENBQXJCOztBQUVBLElBQU1HLFdBQVcsR0FBRyxtQkFBcEI7QUFFQTs7Ozs7O0FBS0EsSUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBR0E7Ozs7Ozs7QUFNQSxTQUFTQyxRQUFULENBQW1CQyxHQUFuQixFQUF3QjtBQUN0QkEsS0FBRyxHQUFHQSxHQUFHLElBQUksRUFBYjtBQUNBLE1BQUlDLElBQUksR0FBR0QsR0FBRyxDQUFDQyxJQUFmOztBQUNBLE1BQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1RBLFFBQUksR0FBR0wsS0FB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b3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgZXJyb3JzID0gcmVxdWlyZShcIi4vX2Vycm9yc1wiKTtcbmNvbnN0IHRyYW5zbGF0aW9ucyA9IHJlcXVpcmUoXCIuL190cmFuc2xhdGlvbnNcIik7XG5jb25zdCBDT0RFUyA9IHJlcXVpcmUoXCIuLy4uL2Rvd25sb2Fkcy9jb2Rlc1wiKTtcblxuY29uc3QgUkVHRVhQX0tFWVMgPSAvJVtBLVphLXowLTlfLV0rJS9nO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgPGdsb2JhbD5cbiAqIEBtb2R1bGUgdXRpbC90cmFuc2xhdGlvblxuICogQHByb3BlcnR5IHt0cmFuc2xhdGlvbkVycm9yc30gZSAtIHtAbGluayB0cmFuc2xhdGlvbkVycm9yc31cbiAqL1xubGV0IHRyYW5zbGF0aW9uID0ge307XG5cblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGtleSAtIHRyYW5zbGF0aW9uIG9iamVjdFxuICogQHJldHVybnMgeyp9IGtleSBmcm9tIHRyYW5zbGF0aW9uIG9iamVjdFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2dldENvZGUgKGtleSkge1xuICBrZXkgPSBrZXkgfHwge307XG4gIGxldCBjb2RlID0ga2V5LmNvZGU7XG4gIGlmICghY29kZSkge1xuICAgIGNvZGUgPSBDT0RFUy5HRU5FUkFMXG4gIH1cbiAgcmV0dXJuIGNvZGU7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBrZXkgLSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gdmFsdWVzIC0gdHJhbnNsYXRpb24gdmFsdWVzXG4gKiBAcmV0dXJucyB7Kn0gYWxsIGtleSB2YWx1ZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRLZXlWYWx1ZXMgKGtleSwgdmFsdWVzKSB7XG4gIGxldCB0cmFuc2xhdGlvbiA9IGtleTtcbiAgbGV0IGtleVZhbHVlcyA9IFtdO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uID09PSBcIm9iamVjdFwiKSB7XG4gICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5tc2c7XG4gIH1cbiAgaWYgKHRyYW5zbGF0aW9uKSB7XG4gICAgaWYgKHZhbHVlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBsZXQgZ3JvdXBzID0gX2dldFVuaXF1ZUtleXModHJhbnNsYXRpb24ubWF0Y2goUkVHRVhQX0tFWVMpKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gTWF0aC5taW4oZ3JvdXBzLmxlbmd0aCwgdmFsdWVzLmxlbmd0aCk7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgbGV0IGtleVZhbHVlID0ge307XG4gICAgICAgIGtleVZhbHVlW2dyb3Vwc1tpXS5yZXBsYWNlKC8lL2csIFwiXCIpXSA9IHZhbHVlc1tpXTtcbiAgICAgICAga2V5VmFsdWVzLnB1c2goa2V5VmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlcyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgZm9yIChsZXQga2V5IGluIHZhbHVlcykge1xuICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBsZXQga2V5VmFsdWUgPSB7fTtcbiAgICAgICAgICBrZXlWYWx1ZVtrZXldID0gdmFsdWVzW2tleV07XG4gICAgICAgICAga2V5VmFsdWVzLnB1c2goa2V5VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVzID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZXMgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHZhbHVlcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IHRyYW5zbGF0aW9uLm1hdGNoKFJFR0VYUF9LRVlTKSB8fCBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICBsZXQga2V5VmFsdWUgPSB7fTtcbiAgICAgICAga2V5VmFsdWVbZ3JvdXBzW2ldLnJlcGxhY2UoLyUvZywgXCJcIildID0gdmFsdWVzO1xuICAgICAgICBrZXlWYWx1ZXMucHVzaChrZXlWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChrZXlWYWx1ZXMgJiYgIWtleVZhbHVlcy5sZW5ndGgpIHtcbiAgICBrZXlWYWx1ZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGtleVZhbHVlcztcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGtleSAtIHRyYW5zbGF0aW9uIG9iamVjdFxuICogQHBhcmFtIHthcnJheXxvYmplY3R8c3RyaW5nfG51bWJlcnxib29sZWFufSB2YWx1ZXMgLSB0cmFuc2xhdGlvbiB2YWx1ZXNcbiAqIEByZXR1cm5zIHsqfSB0cmFuc2xhdGVkIG1lc3NhZ2Ugd2l0aCBhdHRhY2hlZCB2YWx1ZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRUcmFuc2xhdGlvbiAoa2V5LCB2YWx1ZXMpIHtcbiAgbGV0IHRyYW5zbGF0aW9uID0ga2V5O1xuICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uID09PSBcIm9iamVjdFwiKSB7XG4gICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5tc2c7XG4gIH1cbiAgaWYgKHRyYW5zbGF0aW9uKSB7XG4gICAgdHJhbnNsYXRpb24gPSBfcGFyc2VWYWx1ZXModHJhbnNsYXRpb24sIHZhbHVlcyk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNsYXRpb24gPSBcIkludGVybmFsIEVycm9yXCI7XG4gIH1cbiAgcmV0dXJuIHRyYW5zbGF0aW9uO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBhcmdzIC0gYXJndW1lbnRzXG4gKiBAcmV0dXJucyB7YXJyYXl9IGFycmF5IG9mIGFsbCB2YWx1ZXMgZXhjZXB0IDFzdCBvbmVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9nZXRWYWx1ZXMgKGFyZ3MpIHtcbiAgbGV0IHZhbHVlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMSwgaiA9IGFyZ3MubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgdmFsdWVzLnB1c2goYXJnc1tpXSk7XG4gIH1cbiAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICB2YWx1ZXMgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHZhbHVlcyA9IHZhbHVlc1swXVxuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGdyb3VwcyAtIG1hdGNoZWQgZ3JvdXBzXG4gKiBAcmV0dXJucyB7YXJyYXl9IHVuaXF1ZSBuYW1lc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2dldFVuaXF1ZUtleXMgKGdyb3Vwcykge1xuICBsZXQgaGFzaEtleSA9IHt9O1xuICBsZXQgdW5pcXVlTmFtZXMgPSBbXTtcbiAgZ3JvdXBzID0gZ3JvdXBzIHx8IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBpZiAoIWhhc2hLZXlbZ3JvdXBzW2ldXSkge1xuICAgICAgaGFzaEtleVtncm91cHNbaV1dID0gdHJ1ZTtcbiAgICAgIHVuaXF1ZU5hbWVzLnB1c2goZ3JvdXBzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuaXF1ZU5hbWVzO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb24gLSB0ZXh0IHRvIGJlIHRyYW5zbGF0ZWRcbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ3xudW1iZXJ8Ym9vbGVhbn0gdmFsdWVzIC0gdmFsdWVzIHRvIGJlIHBhcnNlZCB3aXRoIHRyYW5zbGF0aW9uXG4gKiBAcmV0dXJucyB7Kn0gdHJhbnNsYXRpb25cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9wYXJzZVZhbHVlcyAodHJhbnNsYXRpb24sIHZhbHVlcykge1xuICB2YWx1ZXMgPSB2YWx1ZXMgfHwgJyc7XG4gIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIGNvbnN0IGdyb3VwcyA9IF9nZXRVbmlxdWVLZXlzKHRyYW5zbGF0aW9uLm1hdGNoKFJFR0VYUF9LRVlTKSk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBNYXRoLm1pbihncm91cHMubGVuZ3RoLCB2YWx1ZXMubGVuZ3RoKTsgaSA8IGo7IGkrKykge1xuICAgICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5yZXBsYWNlKG5ldyBSZWdFeHAoZ3JvdXBzW2ldLCBcImdcIiksIHZhbHVlc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdHJhbnNsYXRpb24gPSB0cmFuc2xhdGlvbi5yZXBsYWNlKG5ldyBSZWdFeHAoXCIlXCIgKyBrZXkgKyBcIiVcIiwgXCJnXCIpLCB2YWx1ZXNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ucmVwbGFjZShSRUdFWFBfS0VZUywgdmFsdWVzKTtcblxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZXMgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlcyA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWVzID09PSBcImJvb2xlYW5cIikge1xuICAgIHRyYW5zbGF0aW9uID0gdHJhbnNsYXRpb24ucmVwbGFjZShSRUdFWFBfS0VZUywgdmFsdWVzKTtcblxuICB9XG4gIHJldHVybiB0cmFuc2xhdGlvbjtcbn1cblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnV0aWwvdHJhbnNsYXRpb24uZ2V0RXJyb3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBrZXkgLSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEByZXR1cm5zIHt7Y29kZTogKiwgbXNnOiAqLCBrZXlzOiAqfX0gLSBlcnJvciBvYmplY3Qgd2l0aCBjb2RlLCBtc2cgYW5kIGtleXNcbiAqL1xuZnVuY3Rpb24gZ2V0RXJyb3IgKGtleSkge1xuICBjb25zdCB2YWx1ZXMgPSBfZ2V0VmFsdWVzKGFyZ3VtZW50cyk7XG4gIGNvbnN0IGtleVZhbHVlcyA9IF9nZXRLZXlWYWx1ZXMoa2V5LCB2YWx1ZXMpO1xuICBjb25zdCBtc2cgPSBfZ2V0VHJhbnNsYXRpb24oa2V5LCB2YWx1ZXMpO1xuICBjb25zdCBjb2RlID0gX2dldENvZGUoa2V5KTtcbiAgcmV0dXJuIHtcbiAgICBjb2RlOiBjb2RlLFxuICAgIG1zZzogbXNnLFxuICAgIGtleXM6IGtleVZhbHVlcyxcbiAgfTtcbn1cblxuLyoqXG4gKiBAYWxpYXMgbW9kdWxlOnV0aWwvdHJhbnNsYXRpb24uZ2V0VHJhbnNsYXRpb25cbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBrZXkgLSB0cmFuc2xhdGlvbiBvYmplY3RcbiAqIEByZXR1cm5zIHsqfSAtIHJldHVybiB0cmFuc2xhdGVkIHN0cmluZyB3aXRoIGNvcnJlY3RseSBhcHBsaWVkIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGlvbiAoa2V5KSB7XG4gIGNvbnN0IHZhbHVlcyA9IF9nZXRWYWx1ZXMoYXJndW1lbnRzKTtcbiAgcmV0dXJuIF9nZXRUcmFuc2xhdGlvbihrZXksIHZhbHVlcyk7XG59XG5cbnRyYW5zbGF0aW9uLmdldEVycm9yID0gZ2V0RXJyb3I7XG50cmFuc2xhdGlvbi5nZXRUcmFuc2xhdGlvbiA9IGdldFRyYW5zbGF0aW9uO1xudHJhbnNsYXRpb24uZSA9IGVycm9ycztcbnRyYW5zbGF0aW9uLnQgPSB0cmFuc2xhdGlvbnM7XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNsYXRpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},107:function(Q,F,B){Q.exports=B(108)},108:function(module,exports,__webpack_require__){"use strict";eval("/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"info\"] }] */\n\n\nvar WIDEVINE_SCHEME_ID_URI = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\n\nvar remote = __webpack_require__(2).remote;\n\nvar ipcRenderer = __webpack_require__(2).ipcRenderer;\n\nvar translation = __webpack_require__(0);\n\nvar downstreamElectronFE;\n\nfunction serialize(obj) {\n  return JSON.stringify(obj);\n}\n\nfunction getWidevinePSSH(info) {\n  var manifestProtections = info.manifestInfo.protections;\n  var videoRepresentation = manifestProtections.video[0] || {};\n\n  if (manifestProtections.video && info.manifest.video) {\n    videoRepresentation = manifestProtections.video.filter(function (manifestProtection) {\n      return info.manifest.video.indexOf(manifestProtection.id) >= 0;\n    });\n    videoRepresentation = videoRepresentation[0] || {};\n  }\n\n  var protections = videoRepresentation.protections || [];\n  var widevinePSSH;\n\n  for (var i = 0, j = protections.length; i < j; i++) {\n    if (protections[i].schemeIdUri === WIDEVINE_SCHEME_ID_URI) {\n      widevinePSSH = protections[i].cencPSSH;\n      break;\n    }\n  }\n\n  return widevinePSSH;\n}\n\nfunction bind(scope, f) {\n  return function bindF() {\n    f.apply(scope, arguments);\n  };\n}\n\nfunction bindAll(scope) {\n  for (var i = 1, j = arguments.length; i < j; i++) {\n    var fName = arguments[i];\n    scope[fName] = bind(scope, scope[fName]);\n  }\n}\n\nfunction clonePersistentConfig(config) {\n  // deep clone the config\n  var clonedConfig = JSON.parse(JSON.stringify(config));\n\n  if (typeof config.serverCertificate !== 'undefined') {\n    clonedConfig.serverCertificate = config.serverCertificate;\n  }\n\n  if (typeof config.licenseRequest === 'function') {\n    clonedConfig.licenseRequest = config.licenseRequest;\n  }\n\n  if (typeof config.licenseResponse === 'function') {\n    clonedConfig.licenseResponse = config.licenseResponse;\n  }\n\n  return clonedConfig;\n}\n/**\n * @constructor\n * @namespace DownstreamElectronFE\n * @param {object} window - window object from renderer window\n * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n * @property {DownstreamElectronFE.downloads} downloads - api for downloads\n * @description\n * this a bridge class for [DownstreamElectronBE]{@link DownstreamElectronBE}\n * all methods described in ({@link DownstreamElectronFE.downloads})\n */\n\n\nfunction DownstreamElectronFE(window, persistent) {\n  var currentWindow = remote.getCurrentWindow();\n\n  if (currentWindow) {\n    this._windowId = currentWindow.id;\n  }\n\n  this._promisesObj = {};\n  this._subscribersId = {};\n  this._promiseCounter = 0;\n  this._window = window;\n  this._persistent = persistent;\n  bindAll(this, '_processApi', '_beforeUnload');\n\n  this._createApiMethods('downloads', ['create', 'createPersistent', 'getFolderInfo', 'getList', 'getListWithInfo', 'getOfflineLink', 'info', 'remove', 'removeAll', 'removeAllUnfinished', 'removePersistent', 'resume', 'saveData', 'savePersistent', 'start', 'stop', 'stopAll', 'subscribe', 'unsubscribe', 'updateDownloadFolder']);\n\n  this._attachEvents();\n}\n\nDownstreamElectronFE.prototype.downloads = {};\n/**\n * Creates a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @returns {void}\n */\n\nDownstreamElectronFE.prototype.downloads.createPersistent = function (args, resolve, reject) {\n  var manifestId = args[0];\n  var config = clonePersistentConfig(args[1]);\n  var forced = args[2];\n  var scope = this;\n\n  if (this._persistent) {\n    this.downloads.info(manifestId).then(function (info) {\n      if (!info) {\n        reject(translation.getError(translation.e.manifests.NOT_FOUND, manifestId));\n        return;\n      }\n\n      var existingPersistentSessionId = info.persistent;\n\n      if (existingPersistentSessionId && !forced) {\n        reject('persistent session already exists:' + JSON.stringify(existingPersistentSessionId));\n      } else {\n        if (!config.pssh) {\n          config.pssh = getWidevinePSSH(info);\n        }\n\n        scope._persistent.createPersistentSession(config).then(function (persistentSessionId) {\n          scope.downloads.savePersistent(manifestId, persistentSessionId).then(function () {\n            if (existingPersistentSessionId) {\n              scope._persistent.removePersistentSession(existingPersistentSessionId).then(function () {\n                resolve(persistentSessionId);\n              })[\"catch\"](function () {\n                resolve(persistentSessionId);\n              });\n            } else {\n              resolve(persistentSessionId);\n            }\n          }, reject);\n        }, reject);\n      }\n    }, reject);\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n/**\n * Removes a persistent session in renderer process using external plugin defined as {@link Persistent}\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype.downloads.removePersistent = function (args, resolve, reject, manifest) {\n  if (this._persistent) {\n    if (manifest && manifest.persistent) {\n      this._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n    } else {\n      resolve();\n    }\n  } else {\n    reject('No persistent plugin initialized');\n  }\n};\n/**\n * Removes a manifest - this is needed on renderer process to check for existence of persistent session\n * and then remove it if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifest - full information about manifest\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype.downloads.remove = function (args, resolve, reject, manifest) {\n  var scope = this;\n\n  if (this._persistent && manifest && manifest.persistent) {\n    scope._persistent.removePersistentSession(manifest.persistent).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n/**\n * Removes all manifests - this is needed on renderer process to check for existence of persistent sessions\n * and then remove them if necessary\n * @param {array} args - arguments\n * @param {function} resolve - should called on success\n * @param {function} reject - should called on failure\n * @param {object} manifests - full information about all manifests\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype.downloads.removeAll = function (args, resolve, reject, manifests) {\n  var scope = this;\n  manifests = manifests || [];\n  var filtered = manifests.filter(function (manifest) {\n    return !!manifest.persistent;\n  });\n  var persistentArr = filtered.map(function (manifest) {\n    return manifest.persistent;\n  });\n\n  if (this._persistent && persistentArr.length > 0) {\n    var promises = [];\n\n    for (var i = 0, j = persistentArr.length; i < j; i++) {\n      promises.push(scope._persistent.removePersistentSession(persistentArr[i]));\n    }\n\n    Promise.all(promises).then(resolve, reject);\n  } else {\n    resolve();\n  }\n};\n/**\n * @param {string} method - method name\n * @param {object} args - arguments\n * @param {function} originalMethod - method to ba called on renderer when main process finishes\n * @private\n * @returns {Promise} - promise\n */\n\n\nDownstreamElectronFE.prototype._apiCall = function (method, args, originalMethod) {\n  var self = this;\n\n  var promiseId = this._generatePromiseId();\n\n  var promise = new Promise(function (resolve, reject) {\n    self._promisesObj[promiseId] = {\n      resolve: resolve,\n      reject: reject,\n      method: method,\n      args: args,\n      originalMethod: originalMethod\n    };\n  });\n  var request = {};\n  request.promiseId = promiseId;\n  request.method = method;\n  request.windowId = this._windowId;\n  request.args = serialize(args);\n\n  this._send(request);\n\n  return promise;\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._attachEvents = function () {\n  var ipcRenderer = __webpack_require__(2).ipcRenderer;\n\n  ipcRenderer.on('downstreamElectronFE', this._processApi);\n\n  this._window.addEventListener('beforeunload', this._beforeUnload);\n};\n/**\n *\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._beforeUnload = function () {\n  this._removeSubscribers();\n};\n/**\n *\n * @private\n * @param {string} namespace - namespace\n * @param {array} methods - methods name array\n * @returns {\n * void}\n */\n\n\nDownstreamElectronFE.prototype._createApiMethods = function (namespace, methods) {\n  function apiFunction(scope, name, originalMethod) {\n    return function () {\n      return scope._apiCall(name, arguments, originalMethod);\n    };\n  }\n\n  this[namespace] = this[namespace] || {};\n\n  function createApiMethod(scope, namespace, name) {\n    var originalMethod;\n\n    if (typeof scope[namespace][name] === 'function') {\n      originalMethod = scope[namespace][name];\n    }\n\n    scope[namespace][name] = apiFunction(scope, namespace + '.' + name, originalMethod);\n  }\n\n  for (var i = 0, j = methods.length; i < j; i++) {\n    createApiMethod(this, namespace, methods[i]);\n  }\n};\n/**\n * @private\n * @param {string} subscriberId - subscriber identifier\n * @param {object} err - error\n * @param {object} result - result\n * @param {boolean} subscriberFinished - information if the subscriber is the last one which helps to remove subscribers\n * for finished downloads\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._executeSubscriber = function (subscriberId, err, result, subscriberFinished) {\n  var subscriber = this._subscribersId[subscriberId];\n\n  if (subscriber) {\n    subscriber.callback(err, result);\n  } else {//ignore wrong window\n  }\n\n  if (subscriberFinished && subscriber) {\n    this._removeLocalSubscribers(subscriber.manifestId);\n  }\n};\n/**\n *\n * @private\n * @returns {string} - promise identifier\n */\n\n\nDownstreamElectronFE.prototype._generatePromiseId = function () {\n  var ts = new Date().getTime();\n  var promiseId;\n  this._promiseCounter++;\n  promiseId = this._promiseCounter + '-' + ts;\n  return promiseId;\n};\n/**\n * @private\n * @param {object} obj - object to be processed\n * @param {object} evt - event\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._processApi = function (obj, evt) {\n  var promiseId = evt.promiseId;\n  var error = evt.error;\n  var result = evt.result;\n  var promiseObj = this._promisesObj[promiseId + ''];\n\n  function resolve(result) {\n    promiseObj.resolve(result);\n\n    this._removeLocalSubscribersForDefinedMethods(promiseObj.method, promiseObj.args[0] || result);\n  }\n\n  if (promiseObj) {\n    if (evt.status === 'OK') {\n      if (typeof promiseObj.originalMethod === 'function') {\n        promiseObj.originalMethod.call(this, promiseObj.args, resolve.bind(this), promiseObj.reject.bind(this), result);\n      } else {\n        resolve.call(this, result);\n      }\n    } else {\n      promiseObj.reject(error);\n    }\n\n    if (evt.subscribersId) {\n      this._saveSubscribersId(promiseObj, evt.subscribersId);\n    }\n\n    delete this._promisesObj[promiseId];\n  } else if (evt.subscriberId) {\n    this._executeSubscriber(evt.subscriberId, evt.err, result, evt.subscriberFinished);\n  } else {//ignore different window\n  }\n};\n/**\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._removeSubscribers = function () {\n  var request = {};\n  var subscribersId;\n  subscribersId = [];\n\n  for (var key in this._subscribersId) {\n    if (this._subscribersId.hasOwnProperty(key)) {\n      subscribersId.push(key);\n    }\n  }\n\n  request.method = 'removeSubscribers';\n  request.args = serialize([subscribersId]);\n\n  this._send(request);\n};\n/**\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._removeLocalSubscribers = function (manifestId) {\n  var self = this;\n\n  if (typeof manifestId === 'string') {\n    manifestId = [manifestId];\n  } else if (manifestId instanceof Array) {\n    manifestId = manifestId.map(function (item) {\n      if (typeof item === 'string') {\n        return item;\n      } else {\n        return item.manifestInfo && item.manifestInfo.id;\n      }\n    });\n  }\n\n  function removeSubscribers(subscriberKey) {\n    for (var i = 0, j = manifestId.length; i < j; i++) {\n      if (typeof self._subscribersId[subscriberKey].manifestId === 'string') {\n        if (self._subscribersId[subscriberKey].manifestId === manifestId[i]) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      } else {\n        var pos = self._subscribersId[subscriberKey].manifestId.indexOf(manifestId[i]);\n\n        if (pos >= 0) {\n          self._subscribersId[subscriberKey].manifestId.splice(pos, 1);\n        }\n\n        if (!self._subscribersId[subscriberKey].manifestId.length) {\n          delete self._subscribersId[subscriberKey];\n          break;\n        }\n      }\n    }\n  }\n\n  if (manifestId) {\n    for (var key in this._subscribersId) {\n      if (this._subscribersId.hasOwnProperty(key)) {\n        removeSubscribers(key);\n      }\n    }\n  } else {\n    this._subscribersId = {};\n  }\n};\n/**\n *\n * @param {string} method - method name\n * @param {string|array} manifestId - manifest identifier or array of manifests identifier\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._removeLocalSubscribersForDefinedMethods = function (method, manifestId) {\n  var methods = ['downloads.stop', 'downloads.stopAll', 'downloads.remove', 'downloads.removeAll', 'downloads.removeAllUnfinished', 'downloads.unsubscribe']; // remove all subscribers when user removes or stop all\n\n  if (method === 'downloads.removeAll' || method === 'downloads.stopAll') {\n    manifestId = undefined;\n  }\n\n  for (var i = 0, j = methods.length; i < j; i++) {\n    if (method === methods[i]) {\n      this._removeLocalSubscribers(manifestId);\n\n      break;\n    }\n  }\n};\n/**\n * @param {Promise} promise - promise\n * @param {string} subscribersId - subscriber identifier\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._saveSubscribersId = function (promise, subscribersId) {\n  var i, j;\n\n  if (typeof subscribersId === 'string' || typeof subscribersId === 'number') {\n    subscribersId = [String(subscribersId)];\n  }\n\n  for (i = 0, j = subscribersId.length; i < j; i++) {\n    this._subscribersId[subscribersId[i]] = {\n      manifestId: promise.args[0],\n      callback: promise.args[2 + i]\n    };\n  }\n};\n/**\n * @param {object} request - request\n * @private\n * @returns {void}\n */\n\n\nDownstreamElectronFE.prototype._send = function (request) {\n  try {\n    ipcRenderer.send('downstreamElectronBE', request);\n  } catch (e) {\n    console.error(e);\n  }\n}; //---------------------------\n\n\nmodule.exports = {\n  /**\n   * @function\n   * @name DownstreamElectronFE#init\n   * @param {object} window - window object from renderer window\n   * @param {Persistent} persistent - persistent helper class for creating and removing persistent session\n   * @description\n   * initialize the api in render process\n   * @returns {DownstreamElectronFE} DownstreamElectronFE\n   * @example\n   * // somewhere in the renderer process\n   * // this is example based on persistent plugin from {@link https://castlabs.com/products/prestoplay-desktop/|PRESTOplay for Desktops},\n   * // you can create its own too, for details click on >> {@link Persistent} <<\n   * const persistent = require('./clpp_persistent.plugin.min');\n   * const downstreamElectron = require(\"downstream-electron\").init(window, persistent);\n   */\n  init: function init(window, persistent) {\n    if (!downstreamElectronFE) {\n      downstreamElectronFE = new DownstreamElectronFE(window, persistent);\n    }\n\n    return downstreamElectronFE;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///108\n")},17:function(module,exports,__webpack_require__){"use strict";eval('\n\nvar CODES = __webpack_require__(6);\n\nvar translationErrors = {\n  downloads: {\n    _GENERAL: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Sorry we are unable to process your request - some internal error occurred"\n    },\n    ALREADY_FINISHED: {\n      code: CODES.ERRORS.FINISHED,\n      msg: "This download \'%manifestId%\' has been already finished."\n    },\n    ALREADY_REMOVED_ALL_UNFINISHED: {\n      code: CODES.ERRORS.REMOVED,\n      msg: "All unfinished downloads have been already removed, nothing left."\n    },\n    ALREADY_RESUMED: {\n      code: CODES.ERRORS.RESUMED,\n      msg: "This download \'%manifestId%\' has been already resumed."\n    },\n    ALREADY_STOPPED: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "This download \'%manifestId%\' has been already stopped or has been already downloaded."\n    },\n    ALREADY_STOPPED_ALL: {\n      code: CODES.ERRORS.STOPPED,\n      msg: "There are no downloads to be stopped."\n    },\n    ALREADY_STARTED: {\n      code: CODES.ERRORS.STARTED,\n      msg: "This download \'%manifestId%\' has been already started."\n    },\n    BROKEN_CANNOT_BE_RESUMED: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "This download \'%manifestId%\' is broken and cannot be resumed."\n    },\n    INFO_FAILED: {\n      code: CODES.ERRORS.INFO,\n      msg: "Gettting info of download \'%manifestId%\' failed."\n    },\n    REMOVING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all downloads failed."\n    },\n    REMOVING_ALL_UNFINISHED_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of all unfinished downloads failed."\n    },\n    REMOVING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Removing of download \'%manifestId%\' failed."\n    },\n    RESUMING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Resuming of download \'%manifestId%\' failed."\n    },\n    UPDATE_DOWNLOAD_FOLDER_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Updating of download folder for \'%manifestId%\' failed."\n    },\n    STOPPING_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping of download \'%manifestId%\' failed."\n    },\n    SAVING_PERSISTENT_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving persistent info for download \'%manifestId%\' failed."\n    },\n    SAVING_DATA_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Saving data for download \'%manifestId%\' failed."\n    },\n    STOPPING_ALL_FAILED: {\n      code: CODES.ERRORS.INTERNAL_ERROR,\n      msg: "Stopping all downloads failed."\n    },\n    UNFINISHED: {\n      code: CODES.ERRORS.UNFINISHED,\n      msg: "This download is not ready yet."\n    }\n  },\n  manifests: {\n    NOT_FOUND: {\n      code: CODES.ERRORS.NOT_FOUND,\n      msg: "Manifest with id=\'%manifestId%\' not found."\n    },\n    LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load manifest from url \'%manifestUrl%\'."\n    },\n    LIST_LOADING_FAILED: {\n      code: CODES.ERRORS.LOADING,\n      msg: "Could not load list of manifests."\n    },\n    FOLDER_ALREADY_EXISTS: {\n      code: CODES.ERRORS.EXISTS,\n      msg: "Folder for manifest with id =\'%manifestId%\' already exists."\n    },\n    INVALID_ID: {\n      code: CODES.ERRORS.BROKEN,\n      msg: "Provided custom id for manifest is not valid: (\'%invalid%\')"\n    }\n  }\n};\nmodule.exports = translationErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n')},18:function(module,exports,__webpack_require__){"use strict";eval('\n\nmodule.exports = {\n  test: "Hello world"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvdHJhbnNsYXRpb24vX3RyYW5zbGF0aW9ucy5qcz82ZWIwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLE1BQUksRUFBRTtBQURTLENBQWpCIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXN0OiBcIkhlbGxvIHdvcmxkXCJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},2:function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJlbGVjdHJvblwiPzA0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMl9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},6:function(module,exports,__webpack_require__){"use strict";eval("\n\nvar codes = {\n  GENERAL: -1,\n  ERRORS: {\n    INTERNAL_ERROR: 1,\n    BROKEN: 11,\n    FINISHED: 12,\n    UNFINISHED: 13,\n    STOPPED: 14,\n    CREATED: 15,\n    MISSING: 16,\n    RESUMED: 17,\n    STARTED: 18,\n    LOADING: 19,\n    REMOVED: 20,\n    INFO: 21,\n    EXISTS: 22,\n    NOT_FOUND: 100\n  }\n};\nmodule.exports = codes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcGkvZG93bmxvYWRzL2NvZGVzLmpzPzhlYzAiXSwibmFtZXMiOlsiY29kZXMiLCJHRU5FUkFMIiwiRVJST1JTIiwiSU5URVJOQUxfRVJST1IiLCJCUk9LRU4iLCJGSU5JU0hFRCIsIlVORklOSVNIRUQiLCJTVE9QUEVEIiwiQ1JFQVRFRCIsIk1JU1NJTkciLCJSRVNVTUVEIiwiU1RBUlRFRCIsIkxPQURJTkciLCJSRU1PVkVEIiwiSU5GTyIsIkVYSVNUUyIsIk5PVF9GT1VORCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUNiLElBQU1BLEtBQUssR0FBRztBQUNaQyxTQUFPLEVBQUUsQ0FBQyxDQURFO0FBRVpDLFFBQU0sRUFBRTtBQUNOQyxrQkFBYyxFQUFFLENBRFY7QUFFTkMsVUFBTSxFQUFFLEVBRkY7QUFHTkMsWUFBUSxFQUFFLEVBSEo7QUFJTkMsY0FBVSxFQUFFLEVBSk47QUFLTkMsV0FBTyxFQUFFLEVBTEg7QUFNTkMsV0FBTyxFQUFFLEVBTkg7QUFPTkMsV0FBTyxFQUFFLEVBUEg7QUFRTkMsV0FBTyxFQUFFLEVBUkg7QUFTTkMsV0FBTyxFQUFFLEVBVEg7QUFVTkMsV0FBTyxFQUFFLEVBVkg7QUFXTkMsV0FBTyxFQUFFLEVBWEg7QUFZTkMsUUFBSSxFQUFFLEVBWkE7QUFhTkMsVUFBTSxFQUFFLEVBYkY7QUFjTkMsYUFBUyxFQUFFO0FBZEw7QUFGSSxDQUFkO0FBbUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixLQUFqQiIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb2RlcyA9IHtcbiAgR0VORVJBTDogLTEsXG4gIEVSUk9SUzoge1xuICAgIElOVEVSTkFMX0VSUk9SOiAxLFxuICAgIEJST0tFTjogMTEsXG4gICAgRklOSVNIRUQ6IDEyLFxuICAgIFVORklOSVNIRUQ6IDEzLFxuICAgIFNUT1BQRUQ6IDE0LFxuICAgIENSRUFURUQ6IDE1LFxuICAgIE1JU1NJTkc6IDE2LFxuICAgIFJFU1VNRUQ6IDE3LFxuICAgIFNUQVJURUQ6IDE4LFxuICAgIExPQURJTkc6IDE5LFxuICAgIFJFTU9WRUQ6IDIwLFxuICAgIElORk86IDIxLFxuICAgIEVYSVNUUzogMjIsXG4gICAgTk9UX0ZPVU5EOiAxMDAsXG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGNvZGVzO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")}},g={},h.m=f,h.c=g,h.d=function(Q,F,B){h.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},h.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},h.t=function(F,Q){if(1&Q&&(F=h(F)),8&Q)return F;if(4&Q&&"object"==typeof F&&F&&F.__esModule)return F;var B=Object.create(null);if(h.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:F}),2&Q&&"string"!=typeof F)for(var U in F)h.d(B,U,function(Q){return F[Q]}.bind(null,U));return B},h.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return h.d(F,"a",F),F},h.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},h.p="",h(h.s=107);function h(Q){if(g[Q])return g[Q].exports;var F=g[Q]={i:Q,l:!1,exports:{}};return f[Q].call(F.exports,F,F.exports,h),F.l=!0,F.exports}var f,g});